on:
    push:
      branches:
        - main
name: Build and Release
permissions:
    actions: write
    checks: write
    contents: write
    deployments: write
    id-token: write
    issues: write
    discussions: write
    packages: write
    repository-projects: write
    security-events: write
    statuses: write
jobs:
    build_and_release:
      runs-on: ubuntu-latest
      env: # Define environment variables here
        TAG: latest
        RELEASE_NAME: Latest release
        RELEASE_BODY: Latest release
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} // Required by releaseMaker
      steps:
        - name: Checkout the repository
          uses: actions/checkout@v2
  
        - name: Set up Go
          uses: actions/setup-go@v2
          with:
            go-version: '*' # Use the latest stable version of Go          

        - name: Install dependencies
          run: go mod download
  
        - name: Download releaseMaker
          run: wget https://github.com/8ff/releaseMaker/releases/download/latest/releaseMaker.linux.amd64 -O releaseMaker && chmod +x releaseMaker
  
        - name: Build binaries
          run: |
            binaryPrefix=my_binary
            tempDir=$(mktemp -d .XXXXXXXXX)
            # GOOS=darwin GOARCH=arm64 go build -ldflags "-X main.Version=$(date +'%Y-%m-%d_%H:%M:%S')" -o "${tempDir}/${binaryPrefix}.darwin.arm64"
            # GOOS=darwin GOARCH=amd64 go build -ldflags "-X main.Version=$(date +'%Y-%m-%d_%H:%M:%S')" -o "${tempDir}/${binaryPrefix}.darwin.amd64"
            # GOOS=linux GOARCH=arm64 go build -ldflags "-X main.Version=$(date +'%Y-%m-%d_%H:%M:%S')" -o "${tempDir}/${binaryPrefix}.linux.arm64"
            # GOOS=linux GOARCH=amd64 go build -ldflags "-X main.Version=$(date +'%Y-%m-%d_%H:%M:%S')" -o "${tempDir}/${binaryPrefix}.linux.amd64"
            # GOOS=windows GOARCH=amd64 go build -ldflags "-X main.Version=$(date +'%Y-%m-%d_%H:%M:%S')" -o "${tempDir}/${binaryPrefix}.windows.amd64.exe"
            # GOOS=windows GOARCH=arm64 go build -ldflags "-X main.Version=$(date +'%Y-%m-%d_%H:%M:%S')" -o "${tempDir}/${binaryPrefix}.windows.arm64.exe"
  
        - name: Replace Existing Release
          run: ./releaseMaker replace ${{ github.repository }} ${{ env.TAG }} "${{ env.RELEASE_NAME }}" "${{ env.RELEASE_BODY }}"
  
        - name: Upload the artifacts
          run: |
            cd "${tempDir}"
            for file in *; do
              ../releaseMaker upload ${{ github.repository }} ${{ env.TAG }} $file $file
            done
  